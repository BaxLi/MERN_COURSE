{"version":3,"sources":["hooks/http.hook.js","context/auth.context.js","pages/AuthPage.js","hooks/message.hook.js","pages/CreatePage.js","components/Loader.js","components/LinkCard.js","pages/DetailPage.js","components/LinksList.js","pages/LinksPage.js","components/navbar.js","App.js","hooks/auth.hook.js","routes.js","serviceWorker.js","index.js"],"names":["useHttp","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","console","log","JSON","stringify","fetch","response","json","data","ok","Error","message","clearError","AuthContext","createContext","login","logout","token","userId","isAuthenticated","AuthPage","auth","useContext","text","window","M","toast","html","email","password","form","setForm","useEffect","updateTextFields","changeHandler","event","target","name","value","registerHandler","loginHandler","className","placeholder","id","type","onChange","htmlFor","style","marginRight","disabled","onClick","CreatePage","link","setlink","history","useHistory","pressHandler","ev","key","from","Authorization","push","_id","paddingTop","e","onKeyPress","Loader","display","justifyContent","LinkCard","href","to","rel","cliks","Date","date","toLocaleDateString","DetailPage","setLink","linkid","useParams","getLink","fetched","LinksList","links","length","map","LinksPage","setlinks","fetchLInks","Navbar","padding","preventDefault","App","settoken","ready","setReady","setuserId","jwttoken","localStorage","setItem","removeItem","parse","getItem","useAuth","routes","path","exact","useRoutes","Provider","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch"],"mappings":"0QAGaA,EAAU,WAAO,IAAD,EACGC,oBAAS,GADZ,mBACpBC,EADoB,KACXC,EADW,OAEDF,mBAAS,MAFR,mBAEpBG,EAFoB,KAEbC,EAFa,KA+B3B,MAAO,CAAEH,UAASI,QA3BFC,sBAAW,uCACvB,WAAOC,GAAP,mCAAAC,EAAA,6DAAYC,EAAZ,+BAAqB,MAAOC,EAA5B,+BAAmC,KAAMC,EAAzC,+BAAmD,GACjDT,GAAW,GACXU,QAAQC,IAAI,2BAAZ,UAA2CJ,EAA3C,cAAuDF,IAFzD,SAIMG,IACAA,EAAKI,KAAKC,UAAUL,GACpBC,EAAQ,gBAAgB,oBAN9B,SASuBK,MAAMT,EAAK,CAAEE,SAAQC,OAAMC,YATlD,cASMM,EATN,iBAUmBA,EAASC,OAV5B,WAUMC,EAVN,OAYAjB,GAAW,GACNe,EAASG,GAbd,uBAcQ,IAAIC,MAAMF,EAAKG,SAAW,cAdlC,iCAgBOH,GAhBP,wCAkBEjB,GAAW,GACXE,EAAS,KAAMkB,SAnBjB,+DADuB,sDAuBxB,IAIwBnB,QAAOoB,WAFjBjB,uBAAY,kBAAIF,EAAS,QAAM,MC3B3C,IAAMoB,EAAcC,wBAAc,CACvCC,MAJO,KAKPC,OALO,KAMPC,MAAO,KACPC,OAAQ,KACRC,iBAAiB,ICLNC,EAAW,WACtB,IAAMC,EAAOC,qBAAWT,GAElBF,ECLGhB,uBACH,SAAC4B,GACOC,OAAOC,GAAKF,GACZC,OAAOC,EAAEC,MAAM,CAACC,KAAKJ,MAG7B,IDJsB,EAIQnC,IAA5BE,EAJoB,EAIpBA,QAASE,EAJW,EAIXA,MAAOE,EAJI,EAIJA,QAJI,EAMJL,mBAAS,CAC/BuC,MAAO,GACPC,SAAU,KARgB,mBAMrBC,EANqB,KAMfC,EANe,KAW5BC,qBAAU,WACRrB,EAAQnB,KACP,CAACA,EAAOmB,IAEXqB,qBAAU,WACRR,OAAOC,EAAEQ,qBACR,IAEH,IAAMC,EAAgB,SAAAC,GACpBJ,EAAQ,eAAKD,EAAN,eAAaK,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,UAGjDC,EAAe,uCAAG,4BAAA1C,EAAA,+EAEDH,EAAQ,qBAAsB,OAAvB,eAAoCoC,IAF1C,OAEdtB,EAFc,OAGpBG,EAAQH,EAAKG,SAHO,gDAKpBV,QAAQC,IAAI,uBAAZ,MALoB,yDAAH,qDAUfsC,EAAY,uCAAG,4BAAA3C,EAAA,+EAEEH,EAAQ,kBAAmB,OAApB,eAAiCoC,IAF1C,OAEXtB,EAFW,OAGjBa,EAAKN,MAAMP,EAAKS,MAAOT,EAAKU,QAHX,gDAKjBjB,QAAQC,IAAI,qBAAZ,MALiB,yDAAH,qDASlB,OACE,yBAAKuC,UAAU,OACb,yBAAKA,UAAU,oBACb,gDACA,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,2BACb,0BAAMA,UAAU,cAAhB,iBACA,6BACE,yBAAKA,UAAU,eACb,2BACEC,YAAY,QACZC,GAAG,QACHC,KAAK,OACLP,KAAK,QACLC,MAAOR,EAAKF,MACZa,UAAU,eACVI,SAAUX,IAEZ,2BAAOY,QAAQ,SAAf,UAEF,yBAAKL,UAAU,eACb,2BAAOC,YAAY,WACfC,GAAG,WACHC,KAAK,OACLP,KAAK,WACLC,MAAOR,EAAKD,SACZgB,SAAUX,IAEd,2BAAOY,QAAQ,YAAf,eAIN,yBAAKL,UAAU,eACb,4BACEA,UAAU,sBACVM,MAAO,CAAEC,YAAa,IACtBC,SAAU3D,EACV4D,QAASV,GAJX,SAQA,4BAAQC,UAAU,gCAAgCS,QAASX,EAAiBU,SAAU3D,GAAtF,iBEpFC6D,EAAa,WAAO,IAAD,EACN9D,mBAAS,IADH,mBACvB+D,EADuB,KACjBC,EADiB,KAEtB3D,EAAYN,IAAZM,QACA2B,EAAOC,qBAAWT,GAClByC,EAAQC,cAEhBvB,qBAAU,WAERR,OAAOC,EAAEQ,qBACR,IAEH,IAAMuB,EAAY,uCAAG,WAAMC,GAAN,eAAA5D,EAAA,yDAEJ,UAAX4D,EAAGC,IAFY,0CAIIhE,EACf,qBACA,OACA,CAAEiE,KAAMP,GACR,CAACQ,cAAc,UAAD,OAAWvC,EAAKJ,SARnB,OAITT,EAJS,OAUX8C,EAAQO,KAAR,kBAAwBrD,EAAK4C,KAAKU,MACtC7D,QAAQC,IAAI,WAAYM,GAXT,gDAafP,QAAQC,IAAI,YAbG,yDAAH,sDAiBlB,OACE,yBAAKuC,UAAU,OACb,yBAAKA,UAAU,mBAAmBM,MAAO,CAAEgB,WAAY,SACrD,yBAAKtB,UAAU,eACb,2BACEC,YAAY,aACZC,GAAG,OACHC,KAAK,OACLN,MAAOc,EACPP,SAAU,SAAAmB,GAAC,OAAIX,EAAQW,EAAE5B,OAAOE,QAChC2B,WAAYT,IAEd,2BAAOV,QAAQ,QAAf,sBCrBKoB,EArBA,WAEb,OACE,yBAAKnB,MAAO,CAAEoB,QAAS,OAAQC,eAAgB,SAAUL,WAAY,SACnE,yBAAKtB,UAAU,gCACb,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,YAEjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,YAEjB,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,gBCdd4B,EAAW,SAAC,GAAc,IAAZjB,EAAW,EAAXA,KAEzB,OADEnD,QAAQC,IAAI,iBAAkBkD,GAE9B,6BACE,sDACA,6FAAgB,uBAAGkB,KAAMlB,EAAKmB,GAAInC,OAAO,SAASoC,IAAI,uBAAuBpB,EAAKmB,KAClF,oEAAW,uBAAGD,KAAMlB,EAAKO,KAAMvB,OAAO,SAASoC,IAAI,uBAAuBpB,EAAKO,OAC/E,mLAAgC,gCAASP,EAAKqB,QAC9C,yGAAkB,gCAAS,IAAIC,KAAKtB,EAAKuB,MAAMC,yBCFxCC,EAAa,WAAO,IACvB5D,EAAUK,qBAAWT,GAArBI,MADsB,EAED7B,IAArBM,EAFsB,EAEtBA,QAASJ,EAFa,EAEbA,QAFa,EAGND,mBAAS,MAHH,mBAGvB+D,EAHuB,KAGjB0B,EAHiB,KAKxBC,EAASC,cAAYrC,GACrBsC,EAAUtF,sBAAW,sBAAC,4BAAAE,EAAA,sEAExBI,QAAQC,IAAI,6BAA6B6E,GAFjB,SAIFrF,EAAQ,aAAD,OAAcqF,GAAU,MAAO,KAAM,CAChEnB,cAAc,UAAD,OAAY3C,KALH,OAIlBiE,EAJkB,OAQxBJ,EAAQI,GARgB,yGAUzB,CAACjE,EAAO8D,EAAQrF,IAMnB,OAJAsC,qBAAU,WACNiD,MACD,CAACA,IAEA3F,EAAiB,kBAAC,EAAD,MAEnB,8BACKA,GAAW8D,GAAQ,kBAAC,EAAD,CAAUA,KAAMA,MC9B/B+B,EAAY,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC1B,OAAKA,EAAMC,OAIT,+BACE,+BACE,4BACE,oCACA,sCACA,uCACA,0CAIJ,+BACGD,EAAME,KAAI,SAAAlC,GACT,OACE,wBAAIM,IAAKN,EAAKU,KACZ,4BACE,kBAAC,IAAD,CAAMS,GAAE,kBAAanB,EAAKU,MAA1B,SAEF,4BAAKV,EAAKO,MACV,4BAAKP,EAAKqB,OACV,4BAAKrB,EAAKmB,UAtBb,oDCEEgB,EAAU,WAAK,IAAD,EACGlG,mBAAS,IADZ,mBAChB+F,EADgB,KACTI,EADS,OAEEpG,IAAlBE,EAFgB,EAEhBA,QAASI,EAFO,EAEPA,QACTuB,EAASK,qBAAWT,GAApBI,MACLwE,EAAW9F,sBAAW,sBAAC,4BAAAE,EAAA,+EAEGH,EAAQ,YAAa,MAAO,KAAM,CAClDkE,cAAc,UAAD,OAAW3C,KAHX,OAEXiE,EAFW,OAKjBM,EAASN,GALQ,uGAUzB,CAACjE,EAAOvB,IAMR,OAJAsC,qBAAU,WACNyD,MACD,CAACA,IAEAnG,EAAiB,kBAAC,EAAD,MAEjB,8BACNA,GAAW,kBAAC,EAAD,CAAW8F,MAAOA,MCzBlBM,G,MAAS,WACpB,IAAMrE,EAAOC,qBAAWT,GAClByC,EAAUC,cAQhB,OACE,6BACE,yBAAKd,UAAU,4BAA4BM,MAAO,CAAC4C,QAAQ,WACzD,0BAAMlD,UAAU,cAAhB,eACA,wBAAIE,GAAG,aAAaF,UAAU,8BAC5B,4BAAI,kBAAC,IAAD,CAAS8B,GAAG,WAAZ,WACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,UAAZ,UACJ,4BAAI,uBAAGD,KAAK,IAAIpB,QAbF,SAACf,GACrBA,EAAMyD,iBACNvE,EAAKL,SACLsC,EAAQO,KAAK,OAUH,cCWCgC,MAvBf,WAAgB,IAAD,ECNQ,WAAO,IAAD,EACDxG,mBAAS,MADR,mBACpB4B,EADoB,KACb6E,EADa,OAEDzG,oBAAS,GAFR,mBAEpB0G,EAFoB,KAEbC,EAFa,OAGC3G,mBAAS,MAHV,mBAGpB6B,EAHoB,KAGZ+E,EAHY,KAKrBlF,EAAQpB,uBAAY,SAACuG,EAAUvD,GACnCmD,EAASI,GACTD,EAAUtD,GACVwD,aAAaC,QATQ,WASkBjG,KAAKC,UAAU,CAAEc,OAAQyB,EAAI1B,MAAOiF,OAC1E,IACGlF,EAASrB,uBAAY,WACzBmG,EAAS,MACTG,EAAU,MACVE,aAAaE,WAdQ,cAepB,IAYH,OAVArE,qBAAU,WAGR,IAAMxB,EAAOL,KAAKmG,MAAMH,aAAaI,QApBhB,aAqBjB/F,GAAQA,EAAKS,OACfF,EAAMP,EAAKS,MAAOT,EAAKU,QAEzB8E,GAAS,KACR,CAACjF,IAEG,CAAEA,QAAOC,SAAQC,QAAOC,SAAQ6E,SDnBMS,GAAtCzF,EADM,EACNA,MAAOC,EADD,EACCA,OAAQC,EADT,EACSA,MAAOC,EADhB,EACgBA,OAAQ6E,EADxB,EACwBA,MAC/B5E,IAAkBF,EAClBwF,EEJiB,SAACtF,GACxB,OAAIA,EAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOuF,KAAK,SAASC,OAAK,GACxB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,UAAUC,OAAK,GACzB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,cAAcC,OAAK,GAC7B,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAUpC,GAAG,aAOjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmC,KAAK,IAAIC,OAAK,GACnB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAUpC,GAAG,OFpBFqC,CAAUzF,GAEzB,OAAK4E,EAKH,kBAAClF,EAAYgG,SAAb,CAAsBvE,MAAO,CAC3BvB,QAAOC,SAAQC,QAAOC,SAAQC,oBAE9B,kBAAC,IAAD,KACGA,GAAmB,kBAAC,EAAD,MACpB,yBAAKsB,UAAU,aACZgE,KAVD,kBAAC,EAAD,OGHUK,QACW,cAA7BtF,OAAOuF,SAASC,UAEe,UAA7BxF,OAAOuF,SAASC,UAEhBxF,OAAOuF,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcxB,MACrByB,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnI,GACLS,QAAQT,MAAMA,EAAMmB,c","file":"static/js/main.7b831b7c.chunk.js","sourcesContent":["import { useState, useCallback } from 'react'\r\n// import { header } from 'express-validator'\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState(null)\r\n  \r\n  const request = useCallback(\r\n      async (url, method = 'get', body = null, headers = {}) => {\r\n        setLoading(true)\r\n        console.log(\"inside useHTTP - request\", `${method} + ${url}`);\r\n    try {\r\n        if (body) {\r\n            body=JSON.stringify(body)\r\n            headers['Content-Type']='application/json'\r\n            // console.log(\"BODY=\", body);\r\n        }\r\n      const response = await fetch(url, { method, body, headers })\r\n      const data = await response.json()\r\n      // console.log(\"dataFetch\",data);\r\n      setLoading(false)\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'smth wrong')\r\n      }\r\n      return data\r\n    } catch (error) {\r\n        setLoading(false)\r\n        setError(error.message)\r\n        throw error\r\n    }\r\n  }, [])\r\n\r\n  const clearError=useCallback(()=>setError(null),[])\r\n\r\n  return { loading, request, error, clearError }\r\n}\r\n","import { createContext } from 'react'\r\nfunction noop() {\r\n  return null\r\n}\r\n\r\nexport const AuthContext = createContext({\r\n  login: noop(),\r\n  logout: noop(),\r\n  token: null,\r\n  userId: null,\r\n  isAuthenticated: false\r\n})\r\n","import React, { useState, useEffect, useContext } from 'react'\r\nimport { useHttp } from '../hooks/http.hook'\r\nimport { useMessage } from '../hooks/message.hook'\r\nimport { AuthContext } from '../context/auth.context'\r\n\r\nexport const AuthPage = () => {\r\n  const auth = useContext(AuthContext)\r\n\r\n  const message = useMessage()\r\n  const { loading, error, request } = useHttp()\r\n\r\n  const [form, setForm] = useState({\r\n    email: '',\r\n    password: ''\r\n  })\r\n\r\n  useEffect(() => {\r\n    message(error)\r\n  }, [error, message])\r\n\r\n  useEffect(() => {\r\n    window.M.updateTextFields()\r\n  }, [])\r\n\r\n  const changeHandler = event => {\r\n    setForm({ ...form, [event.target.name]: event.target.value })\r\n  }\r\n\r\n  const registerHandler = async () => {\r\n    try {\r\n      const data = await request('/api/auth/register', 'POST', { ...form })\r\n      message(data.message)\r\n    } catch (error) {\r\n      console.log('Err Authpage catched', error)\r\n    }\r\n  }\r\n\r\n  //test user - q@mail.ru / pass = 1234qwer\r\n  const loginHandler = async () => {\r\n    try {\r\n      const data = await request('/api/auth/login', 'POST', { ...form })\r\n      auth.login(data.token, data.userId)\r\n    } catch (error) {\r\n      console.log('Err LOGIN  catched', error)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col s6 offset-s3\">\r\n        <div>sokratri ssilku</div>\r\n        <div className=\"card blue darken-1\">\r\n          <div className=\"card-content white-text\">\r\n            <span className=\"card-title\">Authorisation</span>\r\n            <div>\r\n              <div className=\"input-field\">\r\n                <input\r\n                  placeholder=\"email\"\r\n                  id=\"email\"\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  value={form.email}\r\n                  className=\"yellow-input\"\r\n                  onChange={changeHandler}\r\n                />\r\n                <label htmlFor=\"email\">email</label>\r\n              </div>\r\n              <div className=\"input-field\">\r\n                <input placeholder=\"password\"\r\n                    id=\"password\"\r\n                    type=\"text\"\r\n                    name=\"password\"\r\n                    value={form.password}\r\n                    onChange={changeHandler} \r\n                 />\r\n                <label htmlFor=\"password\">password</label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"card-action\">\r\n            <button\r\n              className=\"btn yellow darken-4\"\r\n              style={{ marginRight: 10 }}\r\n              disabled={loading}\r\n              onClick={loginHandler}\r\n            >\r\n              LOGIN\r\n            </button>\r\n            <button className=\"btn grey lighten-1 black-text\" onClick={registerHandler} disabled={loading}>\r\n              Register\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nexport const useMessage=()=>{\r\n    return useCallback(\r\n        (text) => {\r\n            if (window.M && text) {\r\n                window.M.toast({html:text})\r\n            }\r\n        },\r\n        [],\r\n    ) \r\n}","import React, { useState, useEffect, useContext } from 'react'\r\nimport {useHistory} from 'react-router-dom'\r\nimport { useHttp } from '../hooks/http.hook'\r\nimport { AuthContext } from '../context/auth.context'\r\nexport const CreatePage = () => {\r\n  const [link, setlink] = useState('')\r\n  const { request } = useHttp()\r\n    const auth = useContext(AuthContext)\r\n    const history=useHistory()\r\n\r\n  useEffect(() => {\r\n    // @ts-ignore\r\n    window.M.updateTextFields()\r\n  }, [])\r\n\r\n  const pressHandler = async ev => {\r\n     \r\n    if (ev.key === 'Enter') {\r\n      try {\r\n        const data = await request(\r\n            '/api/link/generate',\r\n            'POST',\r\n            { from: link },\r\n            {Authorization:`Bearer ${auth.token}`})\r\n\r\n            history.push(`/detail/${data.link._id}`)\r\n        console.log('link ? =', data)\r\n      } catch (error) {\r\n        console.log(\"HZ error\");\r\n      }\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col s8 offset-s2\" style={{ paddingTop: '2rem' }}>\r\n        <div className=\"input-field\">\r\n          <input\r\n            placeholder=\"input link\"\r\n            id=\"link\"\r\n            type=\"text\"\r\n            value={link}\r\n            onChange={e => setlink(e.target.value)}\r\n            onKeyPress={pressHandler}\r\n          />\r\n          <label htmlFor=\"link\">enter the link</label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nconst Loader = () => {\r\n\r\n  return (\r\n    <div style={{ display: 'flex', justifyContent: 'center', paddingTop: '2rem' }}>\r\n      <div className=\"preloader-wrapper big active\">\r\n        <div className=\"spinner-layer spinner-blue\">\r\n          <div className=\"circle-clipper left\">\r\n            <div className=\"circle\" />\r\n          </div>\r\n          <div className=\"gap-patch\">\r\n            <div className=\"circle\" />\r\n          </div>\r\n          <div className=\"circle-clipper right\">\r\n            <div className=\"circle\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loader\r\n","import React from 'react'\r\nexport const LinkCard = ({ link }) => {\r\n    console.log(\"LinkCard link=\", link)\r\n  return (\r\n    <div>\r\n      <h1>{`LinkCard.js Goes->to =`}</h1>\r\n      <p>Ваша ссылка: <a href={link.to} target=\"_blank\" rel=\"noopener noreferrer\">{link.to}</a></p>\r\n      <p>Откуда: <a href={link.from} target=\"_blank\" rel=\"noopener noreferrer\">{link.from}</a></p>\r\n      <p>Количество кликов по ссылке: <strong>{link.cliks}</strong></p>\r\n      <p>Дата создания: <strong>{new Date(link.date).toLocaleDateString()}</strong></p>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useCallback, useContext, useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useHttp } from '../hooks/http.hook'\r\nimport { AuthContext } from '../context/auth.context'\r\nimport Loader from '../components/Loader'\r\nimport { LinkCard } from '../components/LinkCard'\r\n\r\nexport const DetailPage = () => {\r\n  const { token } = useContext(AuthContext)\r\n  const { request, loading } = useHttp()\r\n  const [link, setLink] = useState(null)\r\n  // @ts-ignore\r\n  const linkid = useParams().id\r\n  const getLink = useCallback(async () => {\r\n    try {\r\n      console.log(\"getlink processed, linkid=\",linkid);\r\n      \r\n      const fetched = await request(`/api/link/${linkid}`, 'GET', null, {\r\n        Authorization: `Bearer ${token}`\r\n      })\r\n      // console.log(\"fetched\", fetched);\r\n      setLink(fetched)\r\n    } catch (error) {}\r\n  }, [token, linkid, request])\r\n\r\n  useEffect(() => {\r\n      getLink()\r\n  }, [getLink])\r\n\r\n  if (loading) {return <Loader/>}\r\n  return (\r\n    <div>\r\n      { !loading && link && <LinkCard link={link} /> }\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nexport const LinksList = ({ links }) => {\r\n  if (!links.length) {\r\n    return <div> No links yet ....</div>\r\n  }\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>Link</th>\r\n          <th>origin</th>\r\n          <th>clicked</th>\r\n          <th>Shortcut</th>\r\n        </tr>\r\n      </thead>\r\n\r\n      <tbody>\r\n        {links.map(link => {\r\n          return (\r\n            <tr key={link._id}>\r\n              <td>\r\n                <Link to={`/detail/${link._id}`}>OPEN</Link>\r\n              </td>\r\n              <td>{link.from}</td>\r\n              <td>{link.cliks}</td>\r\n              <td>{link.to}</td>\r\n            </tr>\r\n          )\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n","import React, { useContext, useState, useCallback, useEffect } from 'react'\r\nimport {useHttp} from '../hooks/http.hook'\r\nimport {AuthContext} from '../context/auth.context'\r\nimport {LinksList} from '../components/LinksList'\r\nimport Loader from '../components/Loader'\r\n\r\nexport const LinksPage=()=>{\r\n    const [links, setlinks] = useState([])\r\n    const {loading, request}=useHttp()\r\n    const {token} = useContext(AuthContext)\r\nconst fetchLInks=useCallback(async () => {\r\n        try{\r\n            const fetched=await request('/api/link', 'GET', null, {\r\n                Authorization:`Bearer ${token}`\r\n            })\r\n            setlinks(fetched)\r\n        }\r\n        catch (e){\r\n        }\r\n    },\r\n    [token, request])\r\n\r\n    useEffect(() => {\r\n        fetchLInks()\r\n    }, [fetchLInks])\r\n\r\n    if (loading) {return <Loader />}\r\n    return (\r\n        <div>\r\n{!loading && <LinksList links={links} />} \r\n        </div>\r\n    )\r\n}","import React, { useContext } from 'react'\r\nimport { NavLink, useHistory } from 'react-router-dom'\r\nimport { AuthContext } from '../context/auth.context'\r\n\r\nexport const Navbar = () => {\r\n  const auth = useContext(AuthContext)\r\n  const history = useHistory()\r\n\r\n  const logoutHandler = (event) => {\r\n    event.preventDefault()\r\n    auth.logout()\r\n    history.push('/')\r\n  }\r\n\r\n  return (\r\n    <nav>\r\n      <div className=\"nav-wrapper blue darken-1\" style={{padding:'0 2rem'}}>\r\n        <span className=\"brand-logo\">LImit links</span>\r\n        <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n          <li><NavLink to=\"/create\">Create</NavLink></li>\r\n          <li><NavLink to=\"/links\">Links</NavLink></li>\r\n          <li><a href=\"/\" onClick={logoutHandler}>Exit</a></li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n","import React from 'react'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { useRoutes } from './routes'\nimport { useAuth } from './hooks/auth.hook'\nimport {AuthContext } from './context/auth.context'\nimport 'materialize-css'\nimport { Navbar } from './components/navbar'\nimport Loader from './components/Loader'\n\nfunction App() {\n  const {login, logout, token, userId, ready }=useAuth()\n  const isAuthenticated=!!token // convert token to boolean if token exist - so already identified \n  const routes = useRoutes(isAuthenticated)\n\n  if (!ready) {\n   return <Loader />\n  }\n\n  return (\n    <AuthContext.Provider value={{\n      login, logout, token, userId, isAuthenticated\n      }}>\n      <Router>\n        {isAuthenticated && <Navbar/> }\n        <div className=\"container\">\n          {routes}\n        </div>\n      </Router>\n    </AuthContext.Provider>\n  )\n}\n\nexport default App\n","import { useState, useCallback, useEffect } from 'react'\r\n\r\nconst localStorageName = 'userData'\r\nexport const useAuth = () => {\r\n  const [token, settoken] = useState(null)\r\n  const [ready, setReady] = useState(false)\r\n  const [userId, setuserId] = useState(null)\r\n\r\n  const login = useCallback((jwttoken, id) => {\r\n    settoken(jwttoken)\r\n    setuserId(id)\r\n    localStorage.setItem(localStorageName, JSON.stringify({ userId: id, token: jwttoken }))\r\n  }, [])\r\n  const logout = useCallback(() => {\r\n    settoken(null)\r\n    setuserId(null)\r\n    localStorage.removeItem(localStorageName)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    // TOD - TEMPORARY - NEED to understand how to use token if was saved >1h ago\r\n    // localStorage.removeItem(localStorageName)\r\n    const data = JSON.parse(localStorage.getItem(localStorageName))\r\n    if (data && data.token) {\r\n      login(data.token, data.userId)\r\n    }\r\n    setReady(true)\r\n  }, [login])\r\n\r\n  return { login, logout, token, userId, ready }\r\n}\r\n","import React from 'react'\r\nimport { Switch, Route, Redirect } from 'react-router-dom'\r\nimport { AuthPage } from './pages/AuthPage'\r\nimport { CreatePage } from './pages/CreatePage'\r\nimport { DetailPage } from './pages/DetailPage'\r\n// import { LinkPage } from './pages/LinkPage'\r\nimport { LinksPage } from './pages/LinksPage'\r\n\r\nexport const useRoutes = (isAuthenticated) => {\r\n  if (isAuthenticated) {\r\n    return (\r\n      <Switch>\r\n        <Route path=\"/links\" exact>\r\n          <LinksPage />\r\n        </Route>\r\n        <Route path=\"/create\" exact>\r\n          <CreatePage />\r\n        </Route>\r\n        <Route path=\"/detail/:id\" exact>\r\n          <DetailPage />\r\n        </Route>\r\n        <Redirect to=\"/create\" />\r\n      </Switch>\r\n    )\r\n  } \r\n  else\r\n   {\r\n    return(\r\n    <Switch>\r\n      <Route path=\"/\" exact>\r\n        <AuthPage />\r\n      </Route>\r\n      <Redirect to=\"/\" />\r\n    </Switch>)\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}